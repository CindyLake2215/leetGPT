### Problem 46: Permutations

#### Problem Statement
Given an array `nums` of distinct integers, return all the possible **permutations**. You can return the answer in **any order**.

---

#### Examples

1. **Input**:  
   ```
   nums = [1, 2, 3]
   ```
   **Output**:  
   ```
   [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
   ```

2. **Input**:  
   ```
   nums = [0, 1]
   ```
   **Output**:  
   ```
   [[0,1],[1,0]]
   ```

3. **Input**:  
   ```
   nums = [1]
   ```
   **Output**:  
   ```
   [[1]]
   ```

---

#### Constraints
- \(1 \leq \text{nums.length} \leq 6\)
- \(-10 \leq \text{nums}[i] \leq 10\)
- All integers in `nums` are unique.

---

#### Topics
- Array
- Backtracking

---

### Process (Plain English Explanation)

1. **Key Idea**:
   - Use **backtracking** to generate all possible permutations:
     - At each step, iterate through the elements of `nums`.
     - Include the element in the current permutation if it hasnâ€™t been used yet.
     - Continue adding elements recursively until the current permutation contains all elements.
     - Backtrack by removing the last added element and trying the next available element.

2. **Steps**:
   - Create a list to hold all permutations.
   - Use a recursive backtracking function:
     - Base case: When the current permutation is the same length as the input array, add it to the result.
     - Iterate through `nums` and add unused elements to the current permutation.
     - Mark the element as used, recurse, and backtrack by marking it unused.

---

### Pseudocode

1. **Initialize**:
   - Create a result list to store permutations.
   - Create a list to track whether an element has been used.

2. **Define Backtracking Function**:
   - Accept parameters `currentPermutation` and `used`.
   - If the size of `currentPermutation` equals the size of `nums`, add it to the result.
   - Iterate through `nums`:
     - If the element is not used:
       - Add it to `currentPermutation`.
       - Mark it as used.
       - Recursively call the function.
       - Backtrack by removing the element and marking it unused.

3. **Start Backtracking**:
   - Call the function with an empty permutation and a `used` array initialized to false.

---

### Java Solution

```java
import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        backtrack(nums, new ArrayList<>(), used, result);
        return result;
    }

    private void backtrack(int[] nums, List<Integer> currentPermutation, boolean[] used, List<List<Integer>> result) {
        // Base case: If the current permutation has all elements
        if (currentPermutation.size() == nums.length) {
            result.add(new ArrayList<>(currentPermutation));
            return;
        }

        // Iterate through each number in nums
        for (int i = 0; i < nums.length; i++) {
            if (used[i]) continue; // Skip already used elements

            // Choose the element
            currentPermutation.add(nums[i]);
            used[i] = true;

            // Recur with the updated state
            backtrack(nums, currentPermutation, used, result);

            // Backtrack: Remove the last element and mark it as unused
            currentPermutation.remove(currentPermutation.size() - 1);
            used[i] = false;
        }
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Test case 1
        int[] nums1 = {1, 2, 3};
        System.out.println("Input: nums = [1, 2, 3]");
        System.out.println("Output: " + solution.permute(nums1));

        // Test case 2
        int[] nums2 = {0, 1};
        System.out.println("Input: nums = [0, 1]");
        System.out.println("Output: " + solution.permute(nums2));

        // Test case 3
        int[] nums3 = {1};
        System.out.println("Input: nums = [1]");
        System.out.println("Output: " + solution.permute(nums3));
    }
}
```

---

### Explanation of the Code

1. **Base Case**:
   - If the `currentPermutation` is the same length as `nums`, it is complete and is added to the result.

2. **Recursive Case**:
   - For each unused element in `nums`, add it to `currentPermutation` and mark it as used.
   - Recursively build the permutation.
   - Backtrack by removing the last element and marking it unused.

3. **Result**:
   - The function generates all possible permutations.

---

### Outputs for Given Test Cases

1. **Input**: `nums = [1, 2, 3]`  
   **Output**:  
   ```
   [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
   ```

2. **Input**: `nums = [0, 1]`  
   **Output**:  
   ```
   [[0,1],[1,0]]
   ```

3. **Input**: `nums = [1]`  
   **Output**:  
   ```
   [[1]]
   ```